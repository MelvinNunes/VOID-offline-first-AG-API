{
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "login": {
        "properties": {
          "email": {
            "example": "example@email.com",
            "type": "string"
          },
          "password": {
            "example": "Y@2@m",
            "minLength": 5,
            "type": "string"
          }
        },
        "type": "object"
      },
      "register": {
        "properties": {
          "email": {
            "example": "example@email.com",
            "type": "string"
          },
          "password": {
            "example": "Y@2@m",
            "minLength": 5,
            "type": "string"
          },
          "first_name": {
            "example": "melvin",
            "type": "string"
          },
          "last_name": {
            "example": "nunes",
            "type": "string"
          },
          "phone_number": {
            "example": 842807039,
            "type": "string"
          }
        },
        "type": "object"
      },
      "productComponent": {
        "type": "object",
        "required": ["productId", "quantity"],
        "properties": {
          "productId": {
            "type": "string",
            "example": "prod_123"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "example": 1
          }
        }
      },
      "product": {
        "type": "object",
        "required": ["id", "name", "description"],
        "properties": {
          "id": {
            "type": "string",
            "example": "prod_123"
          },
          "name": {
            "type": "string",
            "example": "Sample Product"
          },
          "description": {
            "type": "string",
            "example": "A detailed description of the product"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true,
            "example": 29.99
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/productComponent"
            }
          }
        }
      },
      "apiResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "example": 100
          },
          "message": {
            "type": "string",
            "example": "Message Here"
          },
          "data": {
            "type": "object",
            "nullable": true
          }
        }
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@swagger.io",
      "name": "API Support",
      "url": "http://www.swagger.io/support"
    },
    "description": "This is documentation for VOID API V1.0",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "VOID API V1.0",
    "version": "2.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/health": {
      "get": {
        "description": "Returns the health status of the api.",
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "500": {
            "description": "Server is down"
          }
        },
        "summary": "Check Api Health",
        "tags": ["Health"]
      }
    },
    "/login": {
      "post": {
        "description": "Login endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login was successful"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Login into the app",
        "tags": ["Authentication"]
      }
    },
    "/register": {
      "post": {
        "description": "Register user endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/register"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User was registered successfully was successful"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Not enought permissions"
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Registers the user to the app",
        "tags": ["Authentication"]
      }
    },
    "/me": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get my user using the Token.",
        "responses": {
          "200": {
            "description": "Successfully retrivied user"
          },
          "404": {
            "description": "User or Profile was not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Get my user using the Token.",
        "tags": ["Authentication"]
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get all users from the Api.",
        "responses": {
          "200": {
            "description": "Successfully retrivied all users"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Get all users from the api (ADMIN).",
        "tags": ["Users"]
      }
    },
    "/products": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Create a new product",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not enought permissions"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Create a new product",
        "tags": ["Products"]
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get all products with pagination support.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Starting index for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search query to filter items by name or description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter items by category",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Minimum price to filter items",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Maximum price to filter items",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Get all products with pagination",
        "tags": ["Products"]
      }
    },
    "/products/{id}": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get a specific product by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the product to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Get a specific product by ID",
        "tags": ["Products"]
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Delete a specific product by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the product to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not enough permissions"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Delete a specific product by ID",
        "tags": ["Products"]
      },
      "put": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Update a specific product by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the product to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Product Name"
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated product description"
                  },
                  "price": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "example": 39.99
                  },
                  "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 50
                  },
                  "components": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/productComponent"
                    }
                  }
                },
                "required": ["name", "description"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not enough permissions"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "summary": "Update a specific product by ID",
        "tags": ["Products"]
      }
    }
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "tags": [
    {
      "description": "Describes the health status of the application",
      "name": "Health"
    },
    {
      "description": "Describes the authentication methods of the app",
      "name": "Authentication"
    },
    {
      "description": "Describes all users endpoints",
      "name": "Users"
    },
    {
      "description": "Describes all product-related endpoints",
      "name": "Products"
    }
  ]
}
